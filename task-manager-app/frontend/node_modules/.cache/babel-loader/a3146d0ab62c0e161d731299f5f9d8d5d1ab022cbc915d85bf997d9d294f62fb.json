{"ast":null,"code":"var _jsxFileName = \"F:\\\\task-manager-app\\\\frontend\\\\src\\\\pages\\\\EditTask.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getTasks, updateTask } from '../api';\nimport TaskForm from '../components/TaskForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditTask = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [task, setTask] = useState(null);\n\n  // Fetch the task data when component loads\n  useEffect(() => {\n    const fetchTask = async () => {\n      try {\n        const {\n          data\n        } = await getTasks();\n        const selectedTask = data.find(task => task._id === id);\n        console.log(\"Fetched Task Data:\", selectedTask); // Debugging line\n        if (selectedTask) {\n          setTask(selectedTask);\n        }\n      } catch (error) {\n        console.error(\"Error fetching task:\", error);\n      }\n    };\n    fetchTask();\n  }, [id]);\n  const resetTask = () => navigate('/');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Edit Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), task ? /*#__PURE__*/_jsxDEV(TaskForm, {\n      currentTask: task,\n      resetTask: resetTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading task...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 77\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_s(EditTask, \"CeQJ9nNL/QWtVDLEapY9xX2YbBY=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditTask;\nexport default EditTask;\nvar _c;\n$RefreshReg$(_c, \"EditTask\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","getTasks","updateTask","TaskForm","jsxDEV","_jsxDEV","EditTask","_s","id","navigate","task","setTask","fetchTask","data","selectedTask","find","_id","console","log","error","resetTask","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentTask","_c","$RefreshReg$"],"sources":["F:/task-manager-app/frontend/src/pages/EditTask.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { getTasks, updateTask } from '../api';\r\nimport TaskForm from '../components/TaskForm';\r\n\r\nconst EditTask = () => {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const [task, setTask] = useState(null);\r\n\r\n    // Fetch the task data when component loads\r\n    useEffect(() => {\r\n        const fetchTask = async () => {\r\n            try {\r\n                const { data } = await getTasks();\r\n                const selectedTask = data.find(task => task._id === id);\r\n                console.log(\"Fetched Task Data:\", selectedTask); // Debugging line\r\n                if (selectedTask) {\r\n                    setTask(selectedTask);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Error fetching task:\", error);\r\n            }\r\n        };\r\n        fetchTask();\r\n    }, [id]);\r\n\r\n    const resetTask = () => navigate('/');\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>Edit Task</h2>\r\n            {task ? <TaskForm currentTask={task} resetTask={resetTask} /> : <p>Loading task...</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditTask;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,SAASC,QAAQ,EAAEC,UAAU,QAAQ,QAAQ;AAC7C,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM;IAAEC;EAAG,CAAC,GAAGT,SAAS,CAAC,CAAC;EAC1B,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACAD,SAAS,CAAC,MAAM;IACZ,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMZ,QAAQ,CAAC,CAAC;QACjC,MAAMa,YAAY,GAAGD,IAAI,CAACE,IAAI,CAACL,IAAI,IAAIA,IAAI,CAACM,GAAG,KAAKR,EAAE,CAAC;QACvDS,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEJ,YAAY,CAAC,CAAC,CAAC;QACjD,IAAIA,YAAY,EAAE;UACdH,OAAO,CAACG,YAAY,CAAC;QACzB;MACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;IACDP,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACJ,EAAE,CAAC,CAAC;EAER,MAAMY,SAAS,GAAGA,CAAA,KAAMX,QAAQ,CAAC,GAAG,CAAC;EAErC,oBACIJ,OAAA;IAAKgB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtBjB,OAAA;MAAAiB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjBhB,IAAI,gBAAGL,OAAA,CAACF,QAAQ;MAACwB,WAAW,EAAEjB,IAAK;MAACU,SAAS,EAAEA;IAAU;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAGrB,OAAA;MAAAiB,QAAA,EAAG;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrF,CAAC;AAEd,CAAC;AAACnB,EAAA,CA9BID,QAAQ;EAAA,QACKP,SAAS,EACPC,WAAW;AAAA;AAAA4B,EAAA,GAF1BtB,QAAQ;AAgCd,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}